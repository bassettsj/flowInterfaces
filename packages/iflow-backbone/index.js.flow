import type underscore_  from 'underscore_';
import type _Backbone_ from 'backbone';
declare module "backbone" {
    declare class AddOptions extends Silenceable {
        at?: number;
    }

    declare class HistoryOptions extends Silenceable {
        pushState?: boolean;
        root?: string;
    }

    declare class NavigateOptions {
        trigger?: boolean;
        replace?: boolean;
    }

    declare class RouterOptions {
        routes: any;
    }

    declare class Silenceable {
        silent?: boolean;
    }

    declare class Validable {
        validate?: boolean;
    }

    declare class Waitable {
        wait?: boolean;
    }

    declare class Parseable {
        parse?: any;
    }

    declare class PersistenceOptions {
        url?: string;
        data?: any;
        beforeSend?: (jqxhr: JQueryXHR) => void;
        success?: (modelOrCollection?: any, response?: any, options?: any) => void;
        error?: (modelOrCollection?: any, jqxhr?: JQueryXHR, options?: any) => void;
    }

    declare class ModelSetOptions extends Silenceable {
        validate?: boolean;
    }

    declare class ModelFetchOptions extends ModelSetOptions {
        url?: string;
        data?: any;
        beforeSend?: (jqxhr: JQueryXHR) => void;
        success?: (modelOrCollection?: any, response?: any, options?: any) => void;
        error?: (modelOrCollection?: any, jqxhr?: JQueryXHR, options?: any) => void;
        parse?: any;
    }

    declare class ModelSaveOptions extends PersistenceOptions {
        patch?: boolean;
        parse?: any;
        validate?: boolean;
        silent?: boolean;
    }

    declare class ModelDestroyOptions extends PersistenceOptions {
        wait?: boolean;
    }

    declare class CollectionFetchOptions extends PersistenceOptions {
        reset?: boolean;
        parse?: any;
    }

    declare class ObjectHash {
        [key: string]: any;
    }

    declare class RoutesHash {
        [routePattern: string]: string | {
            (...urlParts: Array<string>): void
        };
    }

    declare class EventsHash {
        [selector: string]: string | {
            (eventObject: JQueryEventObject): void
        };
    }

    declare class Events {
        on(eventName: string, callback?: Function, context?: any): any;
        on(eventMap: EventsHash): any;
        off(eventName?: string, callback?: Function, context?: any): any;
        trigger(eventName: string, ...args: Array<any>): any;
        bind(eventName: string, callback: Function, context?: any): any;
        unbind(eventName?: string, callback?: Function, context?: any): any;

        once(events: string, callback: Function, context?: any): any;
        listenTo(object: any, events: string, callback: Function): any;
        listenToOnce(object: any, events: string, callback: Function): any;
        stopListening(object?: any, events?: string, callback?: Function): any;
    }

    declare class ModelBase extends Events {
        url: any;
        parse(response: any, options?: any): any;
        toJSON(options?: any): any;
        sync(...arg: Array<any>): JQueryXHR;
    }

    declare class Model extends ModelBase {

        /**
         * Do not use, prefer TypeScript's extend functionality.
         **/
        static extend(properties: any, classProperties?: any): any;

        attributes: any;
        changed: Array<any>;
        cid: string;
        collection: Collection < any > ;

        /**
         * Default attributes for the model. It can be an object hash or a method returning an object hash.
         * For assigning an object hash, do it like this: this.defaults = <any>{ attribute: value, ... };
         * That works only if you set it in the constructor or the initialize method.
         **/
        defaults(): ObjectHash;
        id: any;
        idAttribute: string;
        validationError: any;
        urlRoot: any;

        constructor(attributes?: any, options?: any): void;
        initialize(attributes?: any, options?: any): void;

        fetch(options?: ModelFetchOptions): JQueryXHR;

        /**
         * For strongly-typed access to attributes, use the `get` method only privately in public getter properties.
         * @example
         * get name(): string {
         *    return super.get("name"): void;
         * }
         **/
        /*private*/
        get(attributeName: string): any;

        /**
         * For strongly-typed assignment of attributes, use the `set` method only privately in public setter properties.
         * @example
         * set name(value: string) {
         *    super.set("name", value: any): void;
         * }
         **/
        /*private*/
        set(attributeName: string, value: any, options?: ModelSetOptions): Model;
        set(obj: any, options?: ModelSetOptions): Model;

        change(): any;
        changedAttributes(attributes?: any): Array<any>;
        clear(options?: Silenceable): any;
        clone(): Model;
        destroy(options?: ModelDestroyOptions): any;
        escape(attribute: string): string;
        has(attribute: string): boolean;
        hasChanged(attribute?: string): boolean;
        isNew(): boolean;
        isValid(options?: any): boolean;
        previous(attribute: string): any;
        previousAttributes(): Array<any>;
        save(attributes?: any, options?: ModelSaveOptions): any;
        unset(attribute: string, options?: Silenceable): Model;
        validate(attributes: any, options?: any): any;

        _validate(attributes: any, options: any): boolean;

        // mixins from underscore

        keys(): Array<string>;
        values(): Array<any>;
        pairs(): Array<any>;
        invert(): any;
        pick(keys: Array<string>): any;
        pick(...keys: Array<string>): any;
        omit(keys: Array<string>): any;
        omit(...keys: Array<string>): any;
    }

    declare class Collection <TModel> extends ModelBase {

        /**
         * Do not use, prefer TypeScript's extend functionality.
         **/
        static extend(properties: any, classProperties?: any): any;

        model: (...args: Array<any>) => TModel;
        models: Array<TModel>;
        length: number;

        constructor(models?: Array<TModel> | Array<Object>, options?: any): void;
        initialize(models?: Array<TModel> | Array<Object>, options?: any): void;

        fetch(options?: CollectionFetchOptions): JQueryXHR;

        comparator(element: TModel): number;
        comparator(compare: TModel, to?: TModel): number;

        add(model: {} | TModel, options?: AddOptions): TModel;
        add(models: ({} | TModel), options?: AddOptions): Array<TModel>;
        at(index: number): TModel;
        /**
         * Get a model from a collection, specified by an id, a cid, or by passing in a model.
         **/
        get(id: number | string | Model): TModel;
        create(attributes: any, options?: ModelSaveOptions): TModel;
        pluck(attribute: string): Array<any>;
        push(model: TModel, options?: AddOptions): TModel;
        pop(options?: Silenceable): TModel;
        remove(model: TModel, options?: Silenceable): TModel;
        remove(models: Array<TModel>, options?: Silenceable): Array<TModel>;
        reset(models?: Array<TModel>, options?: Silenceable): Array<TModel>;
        set(models?: Array<TModel>, options?: Silenceable): Array<TModel>;
        shift(options?: Silenceable): TModel;
        sort(options?: Silenceable): Collection<TModel>;
        unshift(model: TModel, options?: AddOptions): TModel;
        where(properties: any): Array<TModel>;
        findWhere(properties: any): TModel;

        _prepareModel(attributes?: any, options?: any): any;
        _removeReference(model: TModel): void;
        _onModelEvent(event: string, model: TModel, collection: Collection<TModel>, options: any): void;

        // mixins from underscore

        all(iterator: (element: TModel, index: number) => boolean, context?: any): boolean;
        any(iterator: (element: TModel, index: number) => boolean, context?: any): boolean;
        collect(iterator: (element: TModel, index: number, context?: any) => Array<any>, context?: any): Array<any>;
        chain(): any;
        contains(value: any): boolean;
        countBy(iterator: (element: TModel, index: number) => any): underscore_.Dictionary <number> ;
        countBy(attribute: string): underscore_.Dictionary <number> ;
        detect(iterator: (item: any) => boolean, context?: any): any; // ???
        drop(): TModel;
        drop(n: number): Array<TModel>;
        each(iterator: (element: TModel, index: number, list?: any) => void, context?: any): any;
        every(iterator: (element: TModel, index: number) => boolean, context?: any): boolean;
        filter(iterator: (element: TModel, index: number) => boolean, context?: any): Array<TModel>;
        find(iterator: (element: TModel, index: number) => boolean, context?: any): TModel;
        first(): TModel;
        first(n: number): Array<TModel>;
        foldl(iterator: (memo: any, element: TModel, index: number) => any, initialMemo: any, context?: any): any;
        forEach(iterator: (element: TModel, index: number, list?: any) => void, context?: any): any;
        groupBy(iterator: (element: TModel, index: number) => string, context?: any): underscore_.Dictionary < Array<TModel> > ;
        groupBy(attribute: string, context?: any): underscore_.Dictionary < Array<TModel> > ;
        include(value: any): boolean;
            indexOf(element: TModel, isSorted?: boolean): number;
        initial(): TModel;
        initial(n: number): Array<TModel>;
        inject(iterator: (memo: any, element: TModel, index: number) => any, initialMemo: any, context?: any): any;
        isEmpty(object: any): boolean;
        invoke(methodName: string, args?: Array<any>): any;
        last(): TModel;
        last(n: number): Array<TModel>;
        lastIndexOf(element: TModel, fromIndex?: number): number;
        map(iterator: (element: TModel, index: number, context?: any) => any, context?: any): Array<any>;
        max(iterator?: (element: TModel, index: number) => any, context?: any): TModel;
        min(iterator?: (element: TModel, index: number) => any, context?: any): TModel;
        reduce(iterator: (memo: any, element: TModel, index: number) => any, initialMemo: any, context?: any): any;
        select(iterator: any, context?: any): Array<any>;
        size(): number;
        shuffle(): Array<any>;
        slice(min: number, max?: number): Array<TModel>;
        some(iterator: (element: TModel, index: number) => boolean, context?: any): boolean;
        sortBy(iterator: (element: TModel, index: number) => number, context?: any): Array<TModel>;
        sortBy(attribute: string, context?: any): Array<TModel>;
        sortedIndex(element: TModel, iterator?: (element: TModel, index: number) => number): number;
        reduceRight(iterator: (memo: any, element: TModel, index: number) => any, initialMemo: any, context?: any): Array<any>;
        reject(iterator: (element: TModel, index: number) => boolean, context?: any): Array<TModel>;
        rest(): TModel;
        rest(n: number): Array<TModel>;
        tail(): TModel;
        tail(n: number): Array<TModel>;
        toArray(): Array<any>;
        without(...values: Array<any>): Array<TModel>;
    }

    declare class Router extends Events {

        /**
         * Do not use, prefer TypeScript's extend functionality.
         **/
        static extend(properties: any, classProperties?: any): any;

        /**
         * Routes hash or a method returning the routes hash that maps URLs with parameters to methods on your Router.
         * For assigning routes as object hash, do it like this: this.routes = <any>{ "route": callback, ... };
         * That works only if you set it in the constructor or the initialize method.
         **/
        routes: RoutesHash | any;

        constructor(options?: RouterOptions): void;
        initialize(options?: RouterOptions): void;
        route(route: string | RegExp, name: string, callback?: Function): Router;
        navigate(fragment: string, options?: NavigateOptions): Router;
        navigate(fragment: string, trigger?: boolean): Router;

        _bindRoutes(): void;
        _routeToRegExp(route: string): RegExp;
        _extractParameters(route: RegExp, fragment: string): Array<string>;
    }

    declare
    var history: History;

    declare class History extends Events {

        handlers: Array<any>;
        interval: number;

        start(options?: HistoryOptions): boolean;

        getHash(window?: any): string;
        getFragment(fragment?: string, forcePushState?: boolean): string;
        stop(): void;
        route(route: string, callback: Function): number;
        checkUrl(e?: any): void;
        loadUrl(fragmentOverride: string): boolean;
        navigate(fragment: string, options?: any): boolean;
        static started: boolean;
        options: any;

        _updateHash(location: Location, fragment: string, replace: boolean): void;
    }

    declare class ViewOptions <TModel> {
        model?: TModel;
        // TODO: quickfix, this can't be fixed easy. The collection does not need to have the same model as the parent view.
        collection?: Collection<any>; //was: Collection<TModel>;
        el?: any;
        id?: string;
        className?: string;
        tagName?: string;
        attributes?: {
            [id: string]: any
        };
    }

    declare class View<TModel> extends Events {

        /**
         * Do not use, prefer TypeScript's extend functionality.
         **/
        static extend(properties: any, classProperties?: any): any;

        constructor(options?: ViewOptions<TModel>): void;
        initialize(options?: ViewOptions<TModel>): void;

        /**
         * Events hash or a method returning the events hash that maps events/selectors to methods on your View.
         * For assigning events as object hash, do it like this: this.events = <any>{ "event:selector": callback, ... };
         * That works only if you set it in the constructor or the initialize method.
         **/
        events(): EventsHash;

        $(selector: string): JQuery;
        model: TModel;
        collection: Collection<TModel>;

        setElement(element: HTMLElement | JQuery, delegate?: boolean): View<TModel>;
        id: string;
        cid: string;
        className: string;
        tagName: string;

        el: any;
        $el: JQuery;
        setElement(element: any): View<TModel>;
        attributes: any;
        $(selector: any): JQuery;
        render(): View<TModel>;
        remove(): View<TModel>;
        make(tagName: any, attributes?: any, content?: any): any;
        delegateEvents(events?: EventsHash): any;
        delegate(eventName: string, selector: string, listener: Function): View<TModel>;
        undelegateEvents(): any;
        undelegate(eventName: string, selector?: string, listener?: Function): View<TModel>;

        _ensureElement(): void;
    }

    // SYNC
    declare function sync(method: string, model: Model, options?: JQueryAjaxSettings): any;
    declare function ajax(options?: JQueryAjaxSettings): JQueryXHR;
    declare var emulateHTTP: boolean;
    declare var emulateJSON: boolean;

    // Utility
    declare function noConflict(): _Backbone_;
    declare var $: JQueryStatic;
}
